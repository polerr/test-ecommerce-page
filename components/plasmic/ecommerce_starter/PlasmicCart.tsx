// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hiB4DjyRHqRnuTjs3hSpg3
// Component: cejFGztHoZjfsJ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: pJUg0QXd-cEaek/component
import CartItem from "../../CartItem"; // plasmic-import: OTGuHHb8Vx0xuR/component
import Button from "../../Button"; // plasmic-import: bPebpRL-4Thq2C/component
import Separator from "../../Separator"; // plasmic-import: 6Rbb_-9L9sQvDJ/component
import Footer from "../../Footer"; // plasmic-import: 2too7_o7qNE7ni/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2IbRVinUUFLL1i/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: hiB4DjyRHqRnuTjs3hSpg3/projectcss
import * as sty from "./PlasmicCart.module.css"; // plasmic-import: cejFGztHoZjfsJ/css

import Icon31Icon from "./icons/PlasmicIcon__Icon31"; // plasmic-import: KMLSyoGFpSGGG2/icon
import Icon32Icon from "./icons/PlasmicIcon__Icon32"; // plasmic-import: k8Om6U65B3pQhm/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: kcV-U-yG9ZD00R/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: UAFi2tACzXe5Qc/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: NGPtqng7lHomXQ/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: fMDvST1P2RKtcR/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: Dz6r5j1n8egGxq/icon

export type PlasmicCart__VariantMembers = {
  filled: "filled";
};

export type PlasmicCart__VariantsArgs = {
  filled?: SingleBooleanChoiceArg<"filled">;
};

type VariantPropType = keyof PlasmicCart__VariantsArgs;
export const PlasmicCart__VariantProps = new Array<VariantPropType>("filled");

export type PlasmicCart__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCart__ArgsType;
export const PlasmicCart__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4",
  "slot5"
);

export type PlasmicCart__OverridesType = {
  root?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  section?: p.Flex<"section">;
  container2?: p.Flex<"div">;
  cartItem?: p.Flex<typeof CartItem>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  separator?: p.Flex<typeof Separator>;
  container?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
  textbox?: p.Flex<"input">;
};

export interface DefaultCartProps {
  dataFetches: PlasmicCart__Fetches;
}

function PlasmicCart__RenderFunc(props: {
  variants: PlasmicCart__VariantsArgs;
  args: PlasmicCart__ArgsType;
  overrides: PlasmicCart__OverridesType;
  dataFetches?: PlasmicCart__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{"Shopping Cart"}</title>
        <meta key="og:title" property="og:title" content={"Shopping Cart"} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={
            "Congue pulvinar scelerisque vestibulum senectus ullamcorper ac sem justo odio adipiscing volutpat nam a amet quam facilisi parturient parturient et id parturient per."
          }
        />
      </Head>

      <style global jsx>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            { [sty.root__filled]: hasVariant(variants, "filled", "filled") }
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar, {
              [sty.navBar__filled]: hasVariant(variants, "filled", "filled")
            })}
            filled={
              hasVariant(variants, "filled", "filled")
                ? ("filled" as const)
                : undefined
            }
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(defaultcss.all, sty.section)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"container2"}
              data-plasmic-override={overrides.container2}
              hasGap={true}
              className={classNames(defaultcss.all, sty.container2, {
                [sty.container2__filled]: hasVariant(
                  variants,
                  "filled",
                  "filled"
                )
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__pbnec, {
                  [sty.box__filled__pbnecRfjDk]: hasVariant(
                    variants,
                    "filled",
                    "filled"
                  )
                })}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__xbaM,
                    {
                      [sty.box__filled__xbaMRfjDk]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "filled", "filled")
                    ? "Your bag (1)"
                    : "Looks like your bag is empty"}
                </div>

                {(hasVariant(variants, "filled", "filled") ? true : false) ? (
                  <CartItem
                    data-plasmic-name={"cartItem"}
                    data-plasmic-override={overrides.cartItem}
                    className={classNames("__wab_instance", sty.cartItem, {
                      [sty.cartItem__filled]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    })}
                  >
                    <p.PlasmicLink
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.link
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Eternity NITRO Men's Running Shoes"}
                    </p.PlasmicLink>

                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__fkSbD
                      )}
                    >
                      {"#00000"}
                    </div>

                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box___2UChE
                      )}
                    >
                      {"Size: 11"}
                    </div>

                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box___9Cusz
                      )}
                    >
                      {"Quantity: 1"}
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.box__h6ZmS)}
                    >
                      <Icon31Icon
                        className={classNames(defaultcss.all, sty.svg__igo5T)}
                        role={"img"}
                      />

                      <Icon32Icon
                        className={classNames(defaultcss.all, sty.svg___26RB)}
                        role={"img"}
                      />
                    </p.Stack>
                  </CartItem>
                ) : null}

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__ouc7M,
                    {
                      [sty.box__filled__ouc7MRfjDk]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    }
                  )}
                >
                  {
                    "If you have an account, please sign in to see items you previously added."
                  }
                </div>

                <Button
                  colors={"black" as const}
                  icons={"none" as const}
                  rounded={"rounded" as const}
                  size={"large" as const}
                  slot={"Login"}
                />

                <Button
                  colors={"white" as const}
                  icons={"none" as const}
                  rounded={"rounded" as const}
                  slot={"Continue shopping"}
                />

                {(hasVariant(variants, "filled", "filled") ? false : false) ? (
                  <div
                    className={classNames(defaultcss.all, sty.box__z0BpH, {
                      [sty.box__filled__z0BpHRfjDk]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    })}
                  />
                ) : null}
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__oxck1, {
                  [sty.box__filled__oxck1RfjDk]: hasVariant(
                    variants,
                    "filled",
                    "filled"
                  )
                })}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box___72Uhc, {
                    [sty.box__filled___72UhcRfjDk]: hasVariant(
                      variants,
                      "filled",
                      "filled"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__cfzxy,
                      {
                        [sty.box__filled__cfzxyRfjDk]: hasVariant(
                          variants,
                          "filled",
                          "filled"
                        )
                      }
                    )}
                  >
                    {"Order Summary"}
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__uxtzc, {
                      [sty.box__filled__uxtzcRfjDk]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    })}
                  >
                    <div className={classNames(defaultcss.all, sty.box__kA9PK)}>
                      <div
                        className={classNames(defaultcss.all, sty.box__ofnjp, {
                          [sty.box__filled__ofnjpRfjDk]: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                        })}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                            ? "Subtotal (1)"
                            : "Subtotal (0)",
                          value: args.slot5,
                          className: classNames(sty.slotSlot5, {
                            [sty.slotSlot5__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>

                      <div
                        className={classNames(defaultcss.all, sty.box__ljnX, {
                          [sty.box__filled__ljnXRfjDk]: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                        })}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                            ? "$88.99"
                            : "$0.00",
                          value: args.children,
                          className: classNames(sty.slotChildren, {
                            [sty.slotChildren__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>
                    </div>

                    <div className={classNames(defaultcss.all, sty.box___93Pj)}>
                      {(
                        hasVariant(variants, "filled", "filled") ? true : true
                      ) ? (
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__tymfa,
                            {
                              [sty.box__filled__tymfaRfjDk]: hasVariant(
                                variants,
                                "filled",
                                "filled"
                              )
                            }
                          )}
                        >
                          {"Estimated Shipping (free over $49)"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(defaultcss.all, sty.box__qDzxY, {
                          [sty.box__filled__qDzxYRfjDk]: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                        })}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                            ? "FREE"
                            : "-",
                          value: args.slot,
                          className: classNames(sty.slotSlot, {
                            [sty.slotSlot__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>
                    </div>

                    <div className={classNames(defaultcss.all, sty.box__goSj)}>
                      {(
                        hasVariant(variants, "filled", "filled") ? true : true
                      ) ? (
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__lm0U,
                            {
                              [sty.box__filled__lm0URfjDk]: hasVariant(
                                variants,
                                "filled",
                                "filled"
                              )
                            }
                          )}
                        >
                          {"Estimated Tax"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(defaultcss.all, sty.box__vqdRl, {
                          [sty.box__filled__vqdRlRfjDk]: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                        })}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "-",
                          value: args.slot2,
                          className: classNames(sty.slotSlot2, {
                            [sty.slotSlot2__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>
                    </div>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__xcuC,
                        {
                          [sty.button__filled__xcuCRfjDk]: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                        }
                      )}
                      icons={"none" as const}
                      link={"link" as const}
                      slot={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__bRrwN
                          )}
                        >
                          {"Have a promo code?"}
                        </div>
                      }
                    />

                    <Separator
                      data-plasmic-name={"separator"}
                      data-plasmic-override={overrides.separator}
                      className={classNames("__wab_instance", sty.separator)}
                      dark={"dark" as const}
                    />

                    <div
                      className={classNames(defaultcss.all, sty.box__msUc4, {
                        [sty.box__filled__msUc4RfjDk]: hasVariant(
                          variants,
                          "filled",
                          "filled"
                        )
                      })}
                    >
                      {(
                        hasVariant(variants, "filled", "filled") ? true : true
                      ) ? (
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__uvad4,
                            {
                              [sty.box__filled__uvad4RfjDk]: hasVariant(
                                variants,
                                "filled",
                                "filled"
                              )
                            }
                          )}
                        >
                          {"Estimated Total"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(defaultcss.all, sty.box__svy0U, {
                          [sty.box__filled__svy0URfjDk]: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                        })}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                            ? "$88.99"
                            : "$0.00",
                          value: args.slot4,
                          className: classNames(sty.slotSlot4, {
                            [sty.slotSlot4__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>
                    </div>

                    {(hasVariant(variants, "filled", "filled") ? true : false)
                      ? p.renderPlasmicSlot({
                          defaultContents: true ? (
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__nokV2
                              )}
                              colors={"blue" as const}
                              icons={"none" as const}
                              rounded={"rounded" as const}
                              size={"large" as const}
                              slot={
                                <div
                                  className={classNames(
                                    defaultcss.all,
                                    defaultcss.__wab_text,
                                    sty.box__abS
                                  )}
                                >
                                  {"Checkout"}
                                </div>
                              }
                            />
                          ) : null,
                          value: args.slot3
                        })
                      : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.box___6NY9Y, {
                        [sty.box__filled___6NY9YRfjDk]: hasVariant(
                          variants,
                          "filled",
                          "filled"
                        )
                      })}
                    >
                      <Icon30Icon
                        className={classNames(defaultcss.all, sty.svg__fiLhC)}
                        role={"img"}
                      />

                      {(
                        hasVariant(variants, "filled", "filled") ? true : true
                      ) ? (
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__ya4Rx,
                            {
                              [sty.box__filled__ya4RxRfjDk]: hasVariant(
                                variants,
                                "filled",
                                "filled"
                              )
                            }
                          )}
                        >
                          {"Secure"}
                        </div>
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__xhP9O, {
                    [sty.box__filled__xhP9ORfjDk]: hasVariant(
                      variants,
                      "filled",
                      "filled"
                    )
                  })}
                >
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__i8Jo1)}
                    role={"img"}
                    src={"/plasmic/ecommerce_starter/images/image.svg"}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__xNpo)}
                    role={"img"}
                    src={"/plasmic/ecommerce_starter/images/image2.svg"}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__pfS0O)}
                    role={"img"}
                    src={"/plasmic/ecommerce_starter/images/image3.svg"}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__t7Jf8)}
                    role={"img"}
                    src={"/plasmic/ecommerce_starter/images/image4.svg"}
                  />
                </p.Stack>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              hasGap={true}
              className={classNames(defaultcss.all, sty.container, {
                [sty.container__filled]: hasVariant(
                  variants,
                  "filled",
                  "filled"
                )
              })}
            >
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__xdDcP)}
                role={"img"}
                src={
                  "https://www.patagonia.com/on/demandware.static/-/Library-Sites-PatagoniaShared/default/dw4b201dc8/images/for-the-planet.png" as const
                }
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__ao8X7)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box___8EGhW
                  )}
                >
                  {"1% of your purchase will go to a grassroot organization."}
                </div>

                <Button
                  className={classNames("__wab_instance", sty.button__qDnhp)}
                  icons={"none" as const}
                  link={"link" as const}
                  slot={"Learn more"}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
            container432={
              <React.Fragment>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__nBe3C)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__trkSl
                    )}
                  >
                    {"Subscribe"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box___1D67H
                    )}
                  >
                    {
                      "Sign up for exclusive offers, original stories, activism, events and more."
                    }
                  </div>

                  <input
                    data-plasmic-name={"textbox"}
                    data-plasmic-override={overrides.textbox}
                    className={classNames(defaultcss.input, sty.textbox)}
                    placeholder={"Email address…" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"" as const}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button___6Tguf)}
                    colors={"black" as const}
                    icons={"none" as const}
                    slot={"Sign me up"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__mqEqb)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__sGql8
                    )}
                  >
                    {"Help"}
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__so5Z9)}
                  >
                    <Button slot={"Order status"}>
                      <Icon22Icon
                        className={classNames(defaultcss.all, sty.svg__emHxA)}
                        role={"img"}
                      />
                    </Button>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___1Lpfk
                      )}
                      slot={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__wu1IL
                          )}
                        >
                          {"Returns and exchanges"}
                        </div>
                      }
                    >
                      <Icon21Icon
                        className={classNames(defaultcss.all, sty.svg__ezQZq)}
                        role={"img"}
                      />
                    </Button>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__dpjZm
                      )}
                      slot={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__jbt91
                          )}
                        >
                          {"Help center"}
                        </div>
                      }
                    >
                      <Icon20Icon
                        className={classNames(defaultcss.all, sty.svg___9Q1Z1)}
                        role={"img"}
                      />
                    </Button>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box___8Z7Nq)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box___30B1H
                    )}
                  >
                    {"More info"}
                  </div>

                  <div className={classNames(defaultcss.all, sty.box__eGv8C)}>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.box___9FfvH)}
                    >
                      <Button icons={"none" as const} slot={"Gift cards"} />

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__o7LwK
                        )}
                        icons={"none" as const}
                        slot={"Find a store"}
                      />

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__ymx8V
                        )}
                        icons={"none" as const}
                        slot={"Careers"}
                      />

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__od1Hp
                        )}
                        icons={"none" as const}
                        slot={"Sitemap"}
                      />
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.box__xuWep)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__vbsuZ
                        )}
                        icons={"none" as const}
                        slot={"Group sales"}
                      />

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__byO2Q
                        )}
                        icons={"none" as const}
                        slot={"Privacy policy"}
                      />

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__viwAc
                        )}
                        icons={"none" as const}
                        slot={"Contact us"}
                      />
                    </p.Stack>
                  </div>
                </p.Stack>
              </React.Fragment>
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "section",
    "container2",
    "cartItem",
    "link",
    "separator",
    "container",
    "footer",
    "textbox"
  ],
  navBar: ["navBar"],
  section: [
    "section",
    "container2",
    "cartItem",
    "link",
    "separator",
    "container"
  ],
  container2: ["container2", "cartItem", "link", "separator"],
  cartItem: ["cartItem", "link"],
  link: ["link"],
  separator: ["separator"],
  container: ["container"],
  footer: ["footer", "textbox"],
  textbox: ["textbox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: typeof NavBar;
  section: "section";
  container2: "div";
  cartItem: typeof CartItem;
  link: "a";
  separator: typeof Separator;
  container: "div";
  footer: typeof Footer;
  textbox: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCart__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCart__VariantsArgs;
    args?: PlasmicCart__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCart__Fetches;
  } & Omit<PlasmicCart__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCart__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCart__ArgProps,
      internalVariantPropNames: PlasmicCart__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCart__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCart";
  } else {
    func.displayName = `PlasmicCart.${nodeName}`;
  }
  return func;
}

export const PlasmicCart = Object.assign(
  // Top-level PlasmicCart renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    section: makeNodeComponent("section"),
    container2: makeNodeComponent("container2"),
    cartItem: makeNodeComponent("cartItem"),
    link: makeNodeComponent("link"),
    separator: makeNodeComponent("separator"),
    container: makeNodeComponent("container"),
    footer: makeNodeComponent("footer"),
    textbox: makeNodeComponent("textbox"),

    // Metadata about props expected for PlasmicCart
    internalVariantProps: PlasmicCart__VariantProps,
    internalArgProps: PlasmicCart__ArgProps
  }
);

export default PlasmicCart;
/* prettier-ignore-end */
